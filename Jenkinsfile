pipeline {
    agent { label 'ML-Agent-02' } // Jenkins agent c√≥ SSH key ƒë√£ add GitHub

    environment {
        APP_PATH = "${WORKSPACE}"                 // Th∆∞ m·ª•c project Laravel
        LOG_FILE = "${WORKSPACE}/laravel.log"    // Log file
    }

    options {
        timeout(time: 30, unit: 'MINUTES')      // Gi·ªõi h·∫°n pipeline 30 ph√∫t
        timestamps()                             // Log c√≥ timestamp
        ansiColor('xterm')                       // M√†u s·∫Øc log
    }

    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Pull branch hi·ªán t·∫°i t·ª´ GitHub via SSH"
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']], // ho·∫∑c t√™n branch ch√≠nh
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    userRemoteConfigs: [[
                        url: 'git@github.com:PankPanhh/MLTrainDB.git',
                        credentialsId: '', // N·∫øu d√πng SSH key agent m·∫∑c ƒë·ªãnh ƒë·ªÉ tr·ªëng
                    ]]
                ])
            }
        }

        stage('Composer Install') {
            steps {
                echo "üì¶ Running composer install..."
                dir("${APP_PATH}") {
                    sh 'composer install --no-interaction --prefer-dist'
                }
            }
        }

        stage('Clear Laravel Cache') {
            steps {
                echo "üßπ Clearing Laravel cache..."
                dir("${APP_PATH}") {
                    sh '''
                    php artisan config:clear
                    php artisan cache:clear
                    php artisan route:clear
                    php artisan view:clear
                    '''
                }
            }
        }

        stage('Serve Laravel') {
            steps {
                echo "üöÄ Serving Laravel app..."
                dir("${APP_PATH}") {
                    // Ch·∫°y serve Laravel trong background, log ra file
                    sh """
                    nohup php artisan serve --host=127.0.0.1 --port=9000 > ${LOG_FILE} 2>&1 &
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline ch·∫°y th√†nh c√¥ng! Log xem t·∫°i ${LOG_FILE}"
        }
        failure {
            echo "‚ùå Pipeline th·∫•t b·∫°i! Ki·ªÉm tra log t·∫°i ${LOG_FILE}"
        }
    }
}
